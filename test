import React, { Component } from "react";
import logo from "./logo.svg";
import app from "./App.css";
import Edit from "./Edit";
import { Promise } from "q";
var ReactRouter = require("react-router-dom");
var Router = ReactRouter.BrowserRouter;
var Route = ReactRouter.Route;
var Switch = ReactRouter.Switch;
var Link = ReactRouter.Link;
const axios = require("axios").default;
let defaulturl = "https://api.contentstack.io/v3/content_types";
let todolist = "list_value";
let locale = "en-us";
let todolistitem = "to_do_list_item";
let authkey = require("./config.json").authkey; //Finding auth key from config json
let api_key = require("./config.json").api_key; //finding api key from config json
let keys = { item: { name: "zeal", value: "value" } };
let headers = {
  headers: {
    api_key: `${api_key}`,
    authtoken: `${authkey}`,
    "Content-Type": "application/json"
  }
};

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      to_do_list: []
    };
  // this.handleOnClick = this.handleOnClick.bind(this);
  }

  

  componentWillMount() {
 // let data=
  componentMouting().then((data)=>{
    debugger;
    this.setState({ to_do_list:data });
  });

  }

  render() {
    let data = ["zeal", "zeal1"];
    let name = "zeal";
    return (
      <Router>
        <Switch>
          <Route exact path="/edit/Item" component={Edit} />

          <div className="App">
            {<span>{JSON.stringify(this.state.to_do_list.length)}</span>}
            <h1>
              {this.state.to_do_list.map(element => (
                <ItemForElement name={element} />
              ))}
            </h1>
          </div>
        </Switch>
      </Router>
    );
  }
}

async function Todolistitem(element) {
  let finalkey = element;
  let finalOutput = [];
  let url = `${defaulturl}/${todolistitem}/entries/${finalkey.toString()}`;
  let data = await axios.get(url, {
    headers: {
      api_key: `${api_key}`,
      authtoken: `${authkey}`,
      "Content-Type": "application/json"
    }
  });
  debugger;
  return data.data.entry;
}

async function Request(url, data, methodType) {
  //https://api.contentstack.io/v3/content_types/{{todolistitem}}/entries?locale=en-us
  return new Promise((Resolve, Reject) =>{
    axios[methodType](url, data, headers)
      .then(response => {
        alert("New To Do List App is Added.");
        return Resolve(response.data.entry);
      })
      .catch(err => {
        alert("New To Do List App has some error.");
        console.log(err);
        return Reject(err);
      });
  });
}

async function handleOnClick(event){

 //alert('zeal');
 let key=event.target.getAttribute('value');
 let finalUrl=`${defaulturl}/${todolistitem}/entries/${key}?locale=en-us`;
 let returnData=await Request(finalUrl,headers,'delete');
 componentMouting();
 //console.log(event.target);
}

async function componentMouting(){
  let url = `${defaulturl}/${todolist}/entries?locale=${locale}&include_workflow=true&include_publish_details=true`;
  return new Promise((Resolve,Reject)=>{
    axios
    .get(url, {
      headers: {
        api_key: `${api_key}`,
        authtoken: `${authkey}`,
        "Content-Type": "application/json"
      }
    })
    .then(response => {
      response.data.entries.forEach(async element => {
        let to_do_list_items = [];
        await element.reference.forEach(async element1 => {
          debugger;
          let data = await Todolistitem(element1);
          to_do_list_items.push(data);
          element["to_do_list_items"] = to_do_list_items;
          let indexInResponse = response.data.entries.indexOf(element);
          // console.log(indexInResponse);
          response.data.entries[indexInResponse] = element;
          // console.log(JSON.stringify(response.data.entries));
          return Resolve(response.data.entries);
        });
      });
    }).catch(err=>{
      alert(err);
    });
  });
}


function ItemForElement(element) {
  let data = [];
  if (element.name.to_do_list_items != undefined) {
    element.name.to_do_list_items.forEach(element1 => {
      console.log(element1.uid);
      if (element1.complete) {
        data.push(<input type="checkbox" checked />);
      } else {
        data.push(<input className="unchecked" type="checkbox" />);
      }
      data.push(element1.title);
      data.push(
        <div>
          {" "}
          <Link type="button" className="button" to="/edit/Item">
            <button>edit</button>
          </Link>
          {" "}
          <a className="button" onClick={handleOnClick}>
           <button value={element1.uid}>delete</button>
          </a>
          <br />
        </div>
      );
    });
  }

  return (
    <span>
      <hr />
      {element.name.title}
      <div>{data}</div>
      <hr />
    </span>
  );
}


export default App;
